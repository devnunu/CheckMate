# .github/workflows/ai-interactive-response.yml
name: AI Interactive Response

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-response:
    # AI가 생성한 코멘트에 대한 사용자 응답만 처리
    if: |
      github.event_name == 'issue_comment' || 
      github.event_name == 'pull_request_review_comment'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install openai requests PyGithub

      - name: Check if should respond
        id: should-respond
        uses: actions/github-script@v7
        with:
          script: |
            // AI 봇 자신의 코멘트는 무시
            if (context.payload.comment.user.login === 'github-actions[bot]') {
              console.log('AI 봇 자신의 코멘트, 무시');
              core.setOutput('should_respond', 'false');
              return;
            }
            
            // 너무 짧은 코멘트는 무시 (5자 이하)
            const commentBody = context.payload.comment.body.trim();
            if (commentBody.length <= 5) {
              console.log('너무 짧은 코멘트, 무시');
              core.setOutput('should_respond', 'false');
              return;
            }
            
            // 단순한 패턴들 무시
            const ignorePatterns = [
              /^(감사|고마워|thanks|thx)\s*$/i,
              /^(ok|okay|좋아|알겠)\s*$/i,
              /^\s*\+1\s*$/,
              /^\s*👍\s*$/,
              /^\s*✅\s*$/
            ];
            
            for (const pattern of ignorePatterns) {
              if (pattern.test(commentBody)) {
                console.log('단순한 패턴 매치, 무시');
                core.setOutput('should_respond', 'false');
                return;
              }
            }
            
            console.log('응답 가능한 코멘트로 판단');
            core.setOutput('should_respond', 'true');

      - name: Add thinking reaction
        if: steps.should-respond.outputs.should_respond == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'  // 👀 리액션 (생각 중)
              });
            } catch (error) {
              console.log('리액션 추가 실패:', error.message);
            }

      - name: Run Interactive AI Response
        if: steps.should-respond.outputs.should_respond == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_NAME: ${{ github.repository }}
          COMMENT_ID: ${{ github.event.comment.id }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_AUTHOR: ${{ github.event.comment.user.login }}
        run: |
          python .github/scripts/interactive_ai_responder.py

      - name: Add completion reaction
        if: steps.should-respond.outputs.should_respond == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // 생각 중 리액션 제거 (가능한 경우)
              await github.rest.reactions.deleteForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              }).catch(() => {}); // 실패해도 무시
            
              // 완료 리액션 추가
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'rocket'  // 🚀 리액션 (완료)
              });
            } catch (error) {
              console.log('리액션 처리 실패:', error.message);
            }
